package tlc2.cc;

import java.util.ArrayList;
import java.util.HashMap;

import tlc2.cc.CCAction.Type;
import tlc2.tool.Action;
import tlc2.tool.ITool;
import tlc2.tool.TLCState;
import tlc2.value.IValue;
import tlc2.value.impl.SetDiffValue;
import tlc2.value.impl.Value;
import util.UniqueString;


/**
 * A Rounds is a sequence of Round and a Round is a sequence of action.
 * TLCState should be generated by the ordered Rounds' actions.
 */
public class CC  {
	private static Rounds rounds = new Rounds();
	private static UniqueString msgs = null;
	enum MsgsType {SET, FCN};
	private static MsgsType msgsType = MsgsType.SET;
	
	public static Action[] actions;
	public static HashMap<Integer, Action> id2Action = new HashMap<>();

	public static void init(ITool tool) {
		System.out.println("Initialize CC.");
		
		actions = tool.getActions();
		for(int i=0;i<actions.length;i++) {
			id2Action.put(actions[i].getId(), actions[i]);
		}
		printActions();
		
		System.out.println("construct Rounds");
		constructRounds();
		
		System.out.println("set Empty's CCState");
		setEmpty();
		
		print();
	}
	private static void setEmpty() {
		CCState ccstate = new CCState(new CCAction(-1,-1,null,Type.Init,Rounds.INIT_LEVEL));
		CCState.setEmpty(ccstate);
		TLCStateMutCC.setCCEmpty();
	}
	public static void printActions() {
		for(int i=0;i<actions.length;i++) {
			System.out.println("action " + actions[i].getId() + " : " + actions[i].getName() + " " + actions[i].con);
		}
	}
	
	private static void constructRounds() {
		initRaftRound();
	}
	
	private static void initBasicPaxosRound() {
		CC.msgs = UniqueString.uniqueStringOf("msgs");
		CC.msgsType = MsgsType.SET;
		rounds.addRound("prepare0", new int[] { 1 }, new int[] { 7, 9, 11 });
		rounds.addRound("ack0", 		null, new int[] { 2, 3});
		rounds.addRound("propose0", null, new int[] { 8, 10, 12 });
		rounds.addRound("prepare1", 		new int[] { 4 }, new int[] { 7, 9, 11 });
		rounds.addRound("ack1", null, new int[] { 5,6 });
		rounds.addRound("propose1", null, new int[] { 8,10,12 });
	}
	private static void initRaftRound() {
		CC.msgs = UniqueString.uniqueStringOf("messages");
		CC.msgsType = MsgsType.FCN;
		rounds.addRound("Timeout1", new int[] { 1 }, null);
		rounds.addRound("Vote1", new int[] {4,7,10}, new int[] {13,14,15});
		rounds.addRound("HandleVoteResponse1", null , new int[] {22,25,28});
		rounds.addRound("BecomeLeader1", new int[] {31} , null);

		rounds.addRound("ClientRequest1-v1", new int[] {34} , null);
		rounds.addRound("Append1", new int[] {43,46} , new int[] {50,51});
		rounds.addRound("HandleAppendResponse1" , null, new int[] {61,64});
		rounds.addRound("Commit1" , new int[] {67}, null);
		
		rounds.addRound("ClientRequest1-v2", new int[] {37} , null);
		rounds.addRound("Append1", new int[] {43,46} , new int[] {50,51});
		rounds.addRound("HandleAppendResponse1" , null, new int[] {61,64});
		rounds.addRound("Commit1" , new int[] {67}, null);
	}
	private static void inittmpRound() {
		CC.msgs = UniqueString.uniqueStringOf("msgs");
		CC.msgsType = MsgsType.FCN;
		rounds.addRound("round0", null, new int[] { 1 });
		rounds.addRound("round1", null, new int[] { 1 });
		rounds.addRound("round2", null, new int[] { 1 });
		rounds.addRound("round3", null, new int[] { 1 });
		rounds.addRound("round4", null, new int[] { 1 });
	}
	public static Round getRound(int id) {
		return rounds.getRound(id);
	}
	public static int firstRoundId() {
		return rounds.firstRoundId();
	}
	
	
	/**
	 * This method return a next CCIterator list according to the current TLCState's CCState.
	 */
	public static ArrayList<CCAction> getNextActions(TLCState state) {
		CCState ccstate = ((TLCStateMutCC)state).getCCState();
		CCAction pre = ccstate.getPre();
		ArrayList<CCAction> ret = new ArrayList<>();

		switch(pre.getType()) {
		case Init:
		case BeginGuard:
		case Send:
		case EndGuard: {
			CCAction next = rounds.getNext(pre);
			if(next != null) {
				ret.add(next);
			}
			break;
		}
		case MidGuard:
		case Rcv: {
			CCAction cur = pre;
			do {
				cur = rounds.getNext(cur);
				ret.add(cur);
			}while(cur.getType() != Type.EndGuard);
			break;
		}
		default:{ assert(false);}
		}
		return ret;
	}
	
	public static UniqueString getMsgs() {
		return msgs;
	}
	public static void print() {
		rounds.print();
	}
	public static IValue getBeginRoundMsgs(TLCState state) {
		CCState ccstate = ((TLCStateMutCC)state).getCCState();
		if(ccstate.getPre().getType() == Type.Init) {
			return state.lookup(CC.getMsgs());
		}
		
		switch(msgsType) {
		case SET:{
			return new SetDiffValue((Value)ccstate.getMsgs2(), (Value)ccstate.getMsgs1());
		}
		case FCN:{
			return FcnUtil.diff((Value)ccstate.getMsgs2(), (Value)ccstate.getMsgs1());
		}
		default:{
			return null;
		}
		}
	}
}


